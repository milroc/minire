import java.io.File;
import java.util.ArrayList;
import java.util.Scanner;


public class RegexResult {
	ArrayList<String> matches;
	ArrayList<Integer> indexes;
	ArrayList<Integer> lines;
	ArrayList<String> fileNames;
	
	public void find(String fileName, DFA dfa) throws Exception{
		matches = new ArrayList<String>();
		indexes = new ArrayList<Integer>();
		lines = new ArrayList<Integer>();
		fileNames= new ArrayList<String>();
		
		Scanner scan = new Scanner(new File(fileName));
		int lineNum = 0;
		while(scan.hasNextLine()){
			String str = scan.nextLine();
			int[]array = dfa.maxMatchStringIndexAndLength(str,0);
			while (array[0]!=-1){
				if (array[1] > 0){
					matches.add(str.substring(array[0],array[0]+array[1]));
					indexes.add(array[0]);
					lines.add(lineNum);
					fileNames.add(fileName);
				}
				array = dfa.maxMatchStringIndexAndLength(str,array[0]+array[1]+1);

				if(array[0]==0){
					break;
				}
			}
			if (array[1] >= 0){
				matches.add(str.substring(array[0],array[0]+array[1]));
				indexes.add(array[0]);
				lines.add(lineNum);
				fileNames.add(fileName);
			}
			lineNum++;
		}
		
	}
	
	public RegexResult(ArrayList<String> m, ArrayList<Integer> i, ArrayList<Integer> l) throws Exception{
		matches = m;
		indexes = i;
		lines = l;
	}
	
	public RegexResult() throws Exception{
		matches = new ArrayList<String>();
		indexes = new ArrayList<Integer>();
		lines = new ArrayList<Integer>();
		fileNames = new ArrayList<String>();
	}
	
	public void add(String m, Integer i, Integer l, String f){
		matches.add(m);
		indexes.add(i);
		lines.add(l);
		fileNames.add(f);
	}
	
	
	//TODO TEST
	 public RegexResult union(Var var) throws Exception {
		 RegexResult result = new RegexResult();
		 RegexResult o = var.r;
			for(int i = 0; i < this.fileNames.size(); i++)
			{
				if(!(result.fileNames.contains(o.fileNames.get(i)) &&
						result.indexes.contains(o.indexes.get(i)) &&
						result.lines.contains(o.lines.get(i)) &&
						result.matches.contains(o.matches.get(i))) )
				{
					result.add(matches.get(i), indexes.get(i), lines.get(i), fileNames.get(i));
				}
				if(!(result.fileNames.contains(this.fileNames.get(i)) &&
						result.indexes.contains(this.indexes.get(i)) &&
						result.lines.contains(this.lines.get(i)) &&
						result.matches.contains(this.matches.get(i))) )
				{
					result.add(matches.get(i), indexes.get(i), lines.get(i), fileNames.get(i));
				}
			}
			return result;

	 }

	 //TODO TEST
	 public RegexResult inters(Var var) throws Exception {

		 RegexResult result = new RegexResult();
		 RegexResult o = var.r;
			for(int i = 0; i < this.fileNames.size(); i++)
			{
				if(!(result.fileNames.contains(fileNames.get(i)) &&
						result.indexes.contains(indexes.get(i)) &&
						result.lines.contains(lines.get(i)) &&
						result.matches.contains(matches.get(i))) && 
						
						(o.fileNames.contains(fileNames.get(i)) &&
						o.indexes.contains(indexes.get(i)) &&
						o.lines.contains(lines.get(i)) &&
						o.matches.contains(matches.get(i))) && 
						(this.fileNames.contains(o.fileNames.get(i)) &&
								this.indexes.contains(o.indexes.get(i)) &&
								this.lines.contains(o.lines.get(i)) &&
								this.matches.contains(o.matches.get(i)))) 
				{
					result.add(matches.get(i), indexes.get(i), lines.get(i), fileNames.get(i));
				}
			}
			return result;
	 }
	
	public String toString(){
		String ret = "";
		for (int x=0; x<this.indexes.size(); x++){
			ret+="{";
			ret+=this.matches.get(x)+",";
			ret+=this.fileNames.get(x)+",";
			ret+=this.lines.get(x)+",";
			ret+=this.indexes.get(x);
			ret+="}";
		}
		
		
		return ret;
	}
	
	public boolean equals(RegexResult o)
	{
		boolean val = true;
		for(int i = 0; i < this.fileNames.size(); i++)
		{
			if(!(this.fileNames.get(i).equals(o.fileNames.get(i)) &&
					this.indexes.get(i) == o.indexes.get(i) &&
					this.lines.get(i) == o.lines.get(i) &&
					this.matches.get(i).equals(o.matches.get(i))))
				val = false;
		}
		return val;
	}
	
//	public DFA interpret(ParseTree tree) throws Exception
//	{
//		if(tree == null || Êtree.head == null) {
//			NFA emptyString = new DFA();
//			NFAState emptyState = new NFAState("", DFAState.StateType.START_FINAL);
//			emptyString.addState(emptyState);
//			return emptyString;
//			}
//		NFA d = this.rexp(tree.head);
//		if(d != null)
//			return d.generateDFA();
//		else{
//			DFA empty = new DFA();
//		}
//		DFAState mt = new DFAState("Empty DFA Acceptance State", DFAState.StateType.START_FINAL);
//		empty.addState(mt);
//		return empty;
//	}
	
	
	public static void main(String[] args) {
		try {
			RegexResult r1 = new RegexResult();
			RegexResult r2 = new RegexResult();
			r1.add("a", 0, 1,"1");
			r1.add("b", 2, 3,"1");
			r1.add("c", 3, 5,"1");
			r1.add("p", 6, 7,"1");
			r1.add("e", 8, 9,"1");
			
			r2.add("a", 0, 1,"1");
			r2.add("b", 2, 3,"1");
			r2.add("c", 4, 5,"1");
			r2.add("d", 6, 7,"1");
			r2.add("e", 8, 9,"1");
			
			Var v1 = new Var(Var.VarType.STRING_MATCH_LIST);
			v1.r = r1;
			Var v2 = new Var(Var.VarType.STRING_MATCH_LIST);
			v2.r = r2;
			System.out.println(r1.union(v2));
			
			System.out.println(r2.union(v1));
			System.out.println(r1.union(v2));
			
			System.out.println(r2.union(v1));
			
		} catch (Exception e) {

			e.printStackTrace();
		}
		
		
	}
	
	
	
	
	
}
